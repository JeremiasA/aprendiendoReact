{"version":3,"sources":["components/tasks/TaskRow.js","components/tasks/TaskBanner.js","components/tasks/TaskCreator.js","components/users/userRow.js","App.js","reportWebVitals.js","index.js"],"names":["TaskRow","props","style","background","task","done","className","name","type","checked","onChange","toggleTask","TaskBanner","textAlign","marginLeft","user","taskItems","filter","length","TaskCreator","useState","newTaskName","setNewTaskName","value","e","target","id","users","map","usr","username","onClick","select","document","getElementById","selectedUser","options","selectedIndex","cb","tasksLength","alert","UserRow","changeUser","App","activeUser","setActiveUser","setTaskItems","t","thStyle","taskName","userName","taskId","find","display","width","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.550d6448.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const TaskRow = (props) => (\r\n\r\n    <tr style={{background:props.task.done ? \"#88fa9d\" : \"\"}}>\r\n        <td className=\"tdStyle\">{props.task.name}</td>\r\n        <td className=\"tdStyle\">\r\n            <input type=\"checkbox\"\r\n            checked={props.task.done}\r\n            onChange={()=>props.toggleTask(props.task)}/>\r\n        </td>\r\n    </tr>\r\n);\r\n","import React from 'react'\r\nimport './styles.css'\r\n\r\nexport const TaskBanner = props =>{\r\n    return <h3 className=\"bannerStyle bg-primary text-white text-center p.4\">\r\n       <p style={{textAlign:\"left\", marginLeft:\"5px\"}}>{props.user} Task App [\r\n           {props.taskItems.filter(task => !task.done && task.user === props.user).length} task to done]</p>\r\n    </h3>\r\n}","import { React, useState } from 'react'\r\nimport './styles.css'\r\n\r\nexport const TaskCreator = (props) =>{\r\n const [newTaskName, setNewTaskName ] = useState('')\r\n\r\nconst changeTaskName = (e) =>{\r\n    setNewTaskName(e.target.value)\r\n}\r\n\r\nconst onSendNewTask = () =>{\r\n    if(newTaskName !== \"\"){\r\n        const select = document.getElementById(\"asignedUser\");\r\n        const selectedUser = select.options[select.selectedIndex].value;\r\n        props.cb(newTaskName, selectedUser, props.tasksLength+1)\r\n        setNewTaskName(\"\")\r\n\r\n    } else {\r\n        alert(\"Please insert task name\")\r\n    }   \r\n}\r\n\r\n    return ( \r\n        <div className=\"creatorStyle form-group m-1\">\r\n            <h5 className=\"styleh5\">New task:</h5>\r\n            <input className=\"inputStyle form-control m-1\" value={newTaskName} onChange={changeTaskName} /> \r\n            <select className=\"m-1\" id=\"asignedUser\">\r\n                {props.users.map(usr =>\r\n                    <option key={usr.username} value={usr.username}>{usr.username}</option>\r\n                )}\r\n            </select>\r\n            <button className=\"btn btn-primary m-1\" onClick={onSendNewTask}>Add task</button>\r\n        </div>\r\n    )\r\n\r\n}","import React from \"react\";\r\n\r\nexport const UserRow = ({user, changeUser, taskItems}) => (\r\n    <tr>\r\n        <td>\r\n            <button className=\"btn btn-secondary\" onClick={()=> changeUser(user)} >{user}</button>\r\n            \r\n        </td>\r\n        <td>{taskItems.filter(task => !task.done && task.user === user).length} Pending Task/s</td>\r\n    </tr>\r\n);\r\n","import { useState } from \"react\";\nimport { TaskRow } from \"./components/tasks/TaskRow\";\nimport { TaskBanner } from './components/tasks/TaskBanner'\nimport { TaskCreator } from './components/tasks/TaskCreator'\nimport { UserRow } from './components/users/userRow'\n\n\nfunction App() {\n    const [activeUser, setActiveUser] = useState(\"Jeremias\");\n\n    const [users, setUsers] = useState([\n        {username: \"Jeremias\"},\n        {username: \"Karla\"},\n        {username: \"Abril\"}\n    ]);\n    const [taskItems, setTaskItems] = useState([\n        { name: \"task one\", user: \"Jeremias\",  done: false, id:1 },\n        { name: \"task two\", user:\"Karla\", done: false, id:2 },\n        { name: \"task three\", user: \"Jeremias\",  done: true, id:3 },\n        { name: \"task four\", user:\"Abril\", done: false, id:4 },\n        { name: \"task five\", user: \"Jeremias\",  done: false, id:5 },\n        { name: \"task six\", user:\"Karla\", done: false, id:6 },\n        { name: \"task seven\", user: \"Jeremias\",  done: false, id:7 },\n        { name: \"task eigth\", user:\"Abril\", done: false, id:8 },\n    ]);\n\n    const toggleTask = task =>{\n      setTaskItems(taskItems.map(\n          t => t.name === task.name ? {...t, done : !t.done} : t))\n    }\n\n    const changeUser = user =>{\n        setActiveUser(user)\n      }\n  \n   \n    const taskTableRows = () => {\n        return taskItems.map(task => {\n            if(task.user === activeUser)\n                return <TaskRow key={task.id} task={task} activeUser={activeUser} toggleTask={toggleTask} />\n        }\n        );\n    };\n\n    const userTableRows = () =>{\n        return users.map(user =>\n            <UserRow key={user.username} user={user.username} changeUser={changeUser} taskItems={taskItems}/>);\n    }\n\n    const addNewTask = (taskName, userName, taskId) => {\n        if(!taskItems.find(t => t.name === taskName && t.user === userName)){ \n            setTaskItems([...taskItems, {name:taskName, user: userName, id: taskId, done:false}])\n        } else {\n            alert(\"Task already exists!\") //crear alerts personalizados\n        }\n    }\n\n    \nconst tableStyle= {\n    width:\"70%\",\n    \"maxHeight\": \"20px\",\n    marginLeft:\"20px\"\n}\n\nconst usersTableStyle= {\n    width:\"20%\",\n    \"marginLeft\": \"20px\",\n        \n\n}\n\nconst divTablesStyle = {\n    display:\"flex\",\n}\n\nconst thStyle = {\n    \"maxHeight\": \"10px\"\n}\n\n    return (\n        <div>\n            <TaskBanner user={activeUser} taskItems={taskItems} />\n            <hr />\n            <TaskCreator\n                cb={addNewTask}\n                users={users}\n                tasksLength={taskItems.length}\n            />\n            <hr />\n            <div style={divTablesStyle}>\n                <table\n                    style={tableStyle}\n                    className=\"table table-striped table-bordered\"\n                >\n                    <thead style={thStyle}>\n                        <tr>\n                            <th style={thStyle}>Description</th>\n                            <th style={thStyle}>Done</th>\n                        </tr>\n                    </thead>\n                    <tbody>{taskTableRows()}</tbody>\n                </table>\n                <table style={{marginLeft:\"20px\"}}>\n                    <tr>\n                        <td className=\"bg-primary\" width=\"2\"></td>\n                    </tr>\n                </table>\n                <table\n                    style={usersTableStyle}\n                    className=\"table table-striped table-bordered\"\n                >\n                    <thead>\n                        <tr>\n                            <th>User</th>\n                            <th>Tasks</th>\n                        </tr>\n                    </thead>\n                    <tbody>{userTableRows()}</tbody>\n                </table>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}